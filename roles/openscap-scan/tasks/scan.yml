---
- name: ensure report files don't exist
  win_file:
    path: '{{ openscap_install_dir }}\{{ item }}'
    state: absent
  loop:
    - report.html
    - report.xml

- name: openscap scan
  win_shell: oscap xccdf eval --report report.html --results report.xml  {{ scap_benchmark_content_file_name | replace(".zip", ".xml") }}
  args:
    chdir: '{{ openscap_install_dir }}\'
    creates: '{{ openscap_install_dir }}\report.xml'
  register: openscap_scan
  failed_when: openscap_scan.rc > 2
  no_log: true

- name: get results
  slurp:
    src: '{{ openscap_install_dir }}\report.xml'
  register: scap_report_file

- name: set report facts
  set_fact:
    openscap_scan_results:
      benchmark_id: "{{ test_result['benchmark']['@id'] }}"
      total_rules_count: "{{ rule_result | length }}"
      score: "{{ test_result['score']['#text'] }}%"
      rule_results_count:
        notchecked: "{{ rule_result | json_query('@[?result==`notchecked`]') | length }}"
        fixed: "{{ rule_result | json_query('@[?result==`fixed`]') | length }}"
        error: "{{ rule_result | json_query('@[?result==`error`]') | length }}"
        notapplicable: "{{ rule_result | json_query('@[?result==`notapplicable`]') | length }}"
        informational: "{{ rule_result | json_query('@[?result==`informational`]') | length }}"
        unknown: "{{ rule_result | json_query('@[?result==`unknown`]') | length }}"
        fail: "{{ rule_result | json_query('@[?result==`fail`]') | length }}"
        pass: "{{ rule_result | json_query('@[?result==`pass`]') | length }}"
      severity_of_failed_rules_count:
        low: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'low') | list | length }}"
        medium: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'medium') | list | length }}"
        high: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'high') | list | length }}"
      failed_rules: "{{ rule_result | json_query('@[?result==`fail`]') }}"
  vars:
    report_from_xml: "{{ scap_report_file['content'] | b64decode | from_xml | replace('{http://checklists.nist.gov/xccdf/1.2}','') }}"
    test_result: "{{ report_from_xml['Benchmark']['TestResult'] }}"
    rule_result: "{{ test_result['rule-result'] }}"
  run_once: no

- debug:
    msg: "{{ openscap_scan_results }}"
  run_once: no

# we set the security_compliance based on some condition
# in real world, you can have additional conditions
- name: set security compliance status
  set_fact:
    security_compliance:
      status: "{{ true if ((openscap_scan_results.severity_of_failed_rules_count.high|int) < 10) else false }}"
      type: "{{ scap_content_type }}"
  run_once: no

- debug:
    msg: "compliance status: {{ security_compliance.status }}"
  run_once: no